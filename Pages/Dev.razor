@page "/"
@using Listas.Models
@using Listas.Services

<PageTitle>Home</PageTitle>

<input type="text" class="form-control mb-2 mt-5" style="width: 26rem" @bind="Informacion" />

<button class="btn btn-success" @onclick="AgregarNodoFinal">
    Agregar Nodo Al final
</button>

<button class="btn btn-primary" @onclick="AgregarNodoInicio">
    Agregar Nodo Al Inicio
</button>

<hr />

<p class="bg-dark text-white">@Mensaje</p>

<hr />

<div>
    <label>Posición del Nodo a Eliminar:</label>
    <input type="number" @bind="posicion" />
    <button class="btn btn-danger" @onclick="EliminarNodoAntesDePosicion">Eliminar Nodo Antes de Posición</button>
</div>

<hr />

<ul>
    @foreach (var item in Lista)
    {
        <li>@item</li>
    }
</ul>

@code {
    public string Informacion { get; set; }
    public int posicion { get; set; }
    public ListaEnlazadaSimple Lista { get; set; } = new();

    string Mensaje = string.Empty;

    void AgregarNodoFinal()
    {
        Nodo nuevoNodo = new Nodo(Informacion);
        Mensaje = Lista.AgregarNodoAlFinal(nuevoNodo);
        this.Informacion = string.Empty;
    }

    void AgregarNodoInicio()
    {
        Nodo nuevoNodo = new Nodo(Informacion);
        Mensaje = Lista.AgregarNodoAlInicio(nuevoNodo);
        this.Informacion = string.Empty;
    }
    void EliminarNodoAntesDePosicion()
    {
        if (Lista.ListaVacia())
        {
            Mensaje = "La lista está vacía";
            return;
        }

        // Casos especiales: posición inválida o intento de eliminar antes del primer nodo
        if (posicion <= 2)
        {
            Mensaje = "No se puede eliminar un nodo antes de la posición " + posicion + ". La operación no es válida.";
            return;
        }

        // Si la posición es 3, queremos eliminar el primer nodo
        if (posicion == 3)
        {
            Lista.PrimerNodo = Lista.PrimerNodo?.Referencia;
            Mensaje = "Se ha eliminado el nodo antes de la posición especificada (el primer nodo).";
            return;
        }

        Nodo? nodoActual = Lista.PrimerNodo;
        Nodo? nodoAnterior = null;
        int contador = 1;

        // Avanzar hasta llegar al nodo justo antes del que queremos eliminar
        while (nodoActual != null && contador < posicion - 1)
        {
            nodoAnterior = nodoActual;
            nodoActual = nodoActual.Referencia;
            contador++;
        }

        // Verificar que no estamos al final de la lista sin encontrar la posición
        if (nodoActual == null || nodoActual.Referencia == null)
        {
            Mensaje = "La posición especificada excede el tamaño de la lista.";
            return;
        }

        // En este punto, nodoAnterior apunta al nodo antes del que queremos eliminar
        if (nodoAnterior != null)
        {
            nodoAnterior.Referencia = nodoActual.Referencia;
            if (nodoAnterior.Referencia == null) // Si eliminamos el penúltimo, actualizar UltimoNodo
            {
                Lista.UltimoNodo = nodoAnterior;
            }
            Mensaje = "Se ha eliminado el nodo antes de la posición especificada.";
        }
    }


}


