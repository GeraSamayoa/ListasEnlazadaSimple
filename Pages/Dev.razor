@page "/"
@using Listas.Models
@using Listas.Services

<PageTitle>Eliminar Nodo Antes de Posición</PageTitle>

<div class="container mt-3">
    <input type="text" class="form-control mb-2" placeholder="Información del Nodo" @bind="Informacion" />
    <button class="btn btn-success me-2" @onclick="AgregarNodoFinal">Agregar Nodo Al Final</button>
    <button class="btn btn-primary me-2" @onclick="AgregarNodoInicio">Agregar Nodo Al Inicio</button>

    <div class="my-3">
        <label>Posición del Nodo a Eliminar Antes:</label>
        <input type="number" class="form-control w-auto d-inline-block" @bind="posicion" />
        <button class="btn btn-danger" @onclick="EliminarNodoEnPosicion">Eliminar Nodo Antes de Posición</button>
    </div>

    @if (!string.IsNullOrEmpty(Mensaje))
    {
        <p class="bg-dark text-white p-2">@Mensaje</p>
    }

    <ul class="list-group mt-3">
        @foreach (var item in Lista)
        {
            <li class="list-group-item">@item.ToString()</li>
        }
    </ul>
</div>

@code {
    public string Informacion { get; set; }
    public int posicion { get; set; }
    public ListaEnlazadaSimple Lista { get; set; } = new();

    string Mensaje = string.Empty;

    void AgregarNodoFinal()
    {
        if (!string.IsNullOrWhiteSpace(Informacion))
        {
            Nodo nuevoNodo = new Nodo(Informacion);
            Mensaje = Lista.AgregarNodoAlFinal(nuevoNodo);
            Informacion = string.Empty;
        }
    }

    void AgregarNodoInicio()
    {
        if (!string.IsNullOrWhiteSpace(Informacion))
        {
            Nodo nuevoNodo = new Nodo(Informacion);
            Mensaje = Lista.AgregarNodoAlInicio(nuevoNodo);
            Informacion = string.Empty;
        }
    }

    void EliminarNodoEnPosicion()
    {
        if (Lista.ListaVacia())
        {
            Mensaje = "La lista está vacía.";
            return;
        }

        if (posicion <= 2 || posicion > Lista.ContarNodos() + 1)
        {
            Mensaje = "Posición inválida. No se puede eliminar antes de la posición 2 o más allá del último nodo.";
            return;
        }

        if (posicion == 3)
        {
            Lista.EliminarNodoInicio();
            Mensaje = "Nodo antes de la posición 3 eliminado.";
            ActualizarPosiciones();
            return;
        }

        int contador = 1;
        Nodo? nodoActual = Lista.PrimerNodo;
        Nodo? nodoAnterior = null;

        while (nodoActual != null && contador < posicion - 1)
        {
            nodoAnterior = nodoActual;
            nodoActual = nodoActual.Referencia;
            contador++;
        }

        if (nodoActual != null && nodoAnterior != null)
        {
            nodoAnterior.Referencia = nodoActual.Referencia;
            Mensaje = $"Nodo antes de la posición {posicion} eliminado correctamente.";
            ActualizarPosiciones();
        }
        else
        {
            Mensaje = "Posición no válida para la operación solicitada.";
        }
    }

    void ActualizarPosiciones()
    {
        Nodo? nodoActual = Lista.PrimerNodo;
        int contador = 1;
        while (nodoActual != null)
        {
            nodoActual.Posicion = contador;
            nodoActual = nodoActual.Referencia;
            contador++;
        }
    }
}

